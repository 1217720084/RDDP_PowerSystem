# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: testsvc.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import testsvc_pb2


class TestMathBase(abc.ABC):

    @abc.abstractmethod
    async def Mul(self, stream: 'grpclib.server.Stream[testsvc_pb2.BinaryOpReq, testsvc_pb2.BinaryOpResp]') -> None:
        pass

    @abc.abstractmethod
    async def Add(self, stream: 'grpclib.server.Stream[testsvc_pb2.BinaryOpReq, testsvc_pb2.BinaryOpResp]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/TestMath/Mul': grpclib.const.Handler(
                self.Mul,
                grpclib.const.Cardinality.UNARY_UNARY,
                testsvc_pb2.BinaryOpReq,
                testsvc_pb2.BinaryOpResp,
            ),
            '/TestMath/Add': grpclib.const.Handler(
                self.Add,
                grpclib.const.Cardinality.UNARY_UNARY,
                testsvc_pb2.BinaryOpReq,
                testsvc_pb2.BinaryOpResp,
            ),
        }


class TestMathStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Mul = grpclib.client.UnaryUnaryMethod(
            channel,
            '/TestMath/Mul',
            testsvc_pb2.BinaryOpReq,
            testsvc_pb2.BinaryOpResp,
        )
        self.Add = grpclib.client.UnaryUnaryMethod(
            channel,
            '/TestMath/Add',
            testsvc_pb2.BinaryOpReq,
            testsvc_pb2.BinaryOpResp,
        )
